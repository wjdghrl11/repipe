# 클래스 > 같은 성격의 자료구조와 그 자료구조를 처리하는 함수를 따로 모아놓은 것.
#        > 정보(속성) 정보를 처리(기능,동작)
#        > 사람 : 이름, 나이, 키 / 동작 : 걷다, 먹다, 숨쉬다, 말하다..
#        > 자동차 : 모델, 연식, 속력, 색상 / 동작 : 가속, 제동, 자율주행..
#        > 사울이남 개념을 표현.

# 리스트 딕셔너리 > 데이터 관리를 편하게 > 코드 관리를 편하게 하기 위해

# 현실 세계 반영 > 사물이나 개념 > 복잡한 정보로 이루어짐.

# 회원정보 > 이름, 주소, 아이디, 비밀번호 등등 > 데이터가모여서 표현해야함
 
# 리스트 > 순번(index) > 딕셔너리 > 이름(key)

# 프로그램은 크게 데이터, 데이터를 처리하는 함수

# 사람이 움직인다  > 사람의 좌표정보를 처리 0 , 0 > 5, 0

# age = 20
# name ="홍길동"
# address = "서울"

# age2 = 22
# name2 = "홍길순"
# address2 = "대전"

def introduce(person):
    print("안녕하세요 {} 사는 {}살 {}입니다.".format(person["주소"], person["나이"], person["이름"]))

# 구조화된 데이터 자료구조
personDic = {"나이" : 20, "이름" : "홍길동", "주소" : "서울"}
personDic2= {"나이" : 22, "이름" : "홍길순", "주소" : "대전"}

#자료구조를 이용해 데이터를 처리하는 함수
introduce(personDic)
introduce(personDic2)

# 강아지 > 이름 나이 품종
dog = {"이름" : "맥스", "나이" : 4, "품종" : "푸들"}

def introduce_dog(dog):
    print("이름 : {}".format(dog["이름"]))
    print("나이 : {}".format(dog["나이"]))
    print("품종 : {}".format(dog["품종"]))

introduce_dog(dog)    

